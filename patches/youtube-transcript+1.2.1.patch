diff --git a/node_modules/youtube-transcript/dist/index.js b/node_modules/youtube-transcript/dist/index.js
index d95eab0..f88a8d1 100644
--- a/node_modules/youtube-transcript/dist/index.js
+++ b/node_modules/youtube-transcript/dist/index.js
@@ -53,7 +53,7 @@
      * @param videoId Video id
      */
     static async fetchTranscript(videoId, config) {
-        const identifier = videoId.includes('http') ? (0, get_video_id_1.getVideoId)(videoId) : videoId;
+        const identifier = videoId.includes('http') || videoId.includes('https') ? (0, get_video_id_1.getVideoId)(videoId) : videoId;
         const lang = config?.lang ?? 'en';
         try {
             const { data: videoPageHtml } = await cross_fetch_1.default.get(`https://www.youtube.com/watch?v=${identifier}`);
diff --git a/node_modules/youtube-transcript/dist/utils/get-video-id.js b/node_modules/youtube-transcript/dist/utils/get-video-id.js
index 7247d48..8b193c7 100644
--- a/node_modules/youtube-transcript/dist/utils/get-video-id.js
+++ b/node_modules/youtube-transcript/dist/utils/get-video-id.js
@@ -1,13 +1,21 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getVideoId = void 0;
+exports.getVideoId = exports.YOUTUBE_URL_REGEX = void 0;
 const InvalidYoutubeUrlError_1 = require("../errors/InvalidYoutubeUrlError");
-const YOUTUBE_URL_REGEX = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=)?(.+)/;
+exports.YOUTUBE_URL_REGEX = /^(https?\:\/\/)?((www\.)?youtube\.com|youtu\.be)\/.+$/;
+const V_REGEX = /(?:watch\?v=)([^&]+)/;
+const SHORT_REGEX = /(?:youtu\.be\/)([^?]+)/;
 function getVideoId(url) {
-    const match = url.match(YOUTUBE_URL_REGEX);
-    if (!match || !match[1]) {
-        throw new InvalidYoutubeUrlError_1.InvalidYoutubeUrlError();
+    if (!url || !exports.YOUTUBE_URL_REGEX.test(url)) {
+        throw new InvalidYoutubeUrlError_1.InvalidYoutubeUrlError(url);
     }
-    return match[1];
+    if (url.includes('watch?v=')) {
+        return url.match(V_REGEX)[1];
+    }
+    if (url.includes('youtu.be/')) {
+        return url.match(SHORT_REGEX)[1];
+    }
+    throw new InvalidYoutubeUrlError_1.InvalidYoutubeUrlError(url);
 }
 exports.getVideoId = getVideoId;
+//# sourceMappingURL=get-video-id.js.map
\ No newline at end of file
